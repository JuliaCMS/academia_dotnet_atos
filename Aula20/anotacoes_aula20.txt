# ORIENTAÇÃO A OBJETOS

- Terceirização de serviços
- Tipos não naturais ou estruturas heterogêneas (tipos criados -> Classes)
    - novos atributos e com diferentes tipos
    - novos serviços e/ou reutilizar já existentes
- Poder reproduzir o relacionamento natural de uma sociedade

(As classes são uma forma de criar tipos não naturais ou estruturas heterogêneas em linguagens de programação orientadas a objetos. Uma classe é uma estrutura que pode conter dados (atributos) e métodos que descrevem o comportamento do objeto. Ela permite a criação de objetos que podem ser instanciados a partir dessa classe, permitindo que diferentes instâncias compartilhem as mesmas características e comportamentos definidos pela classe.)


- CONCEITOS DA ORIENTAÇÃO A OBJETOS

    - Classe e objeto (instância ou elemento // explicação está abaixo)
        - atributos -> aspectos estruturais (variáveis)
        - métodos -> aspectos comportamentais/funcionais (operações)
            - construtor -> garante que um objeto de uma classe seja instanciado !!!
            - getters e setters -> métodos de acesso (leitura ou escrita)
			get lê o valor de um atributo
			set altera o valor de um atributo
(Uma instância é uma realização concreta de uma classe, ou seja, é um objeto criado a partir da classe. Quando você cria uma instância de uma classe, você está criando um objeto com seus próprios valores para os atributos definidos na classe.
Normalmente os elementos referem-se aos atributos e métodos da classe. Os atributos são as características ou propriedades que um objeto da classe pode ter, enquanto os métodos são as ações que o objeto pode executar.)

    - Relacionamentos
        - objetos tendo relação com outros objetos
        - 3 tipos
            - associação (associação de um objeto a outro)
            - herança (uma herança base com outras estruturas dependendo dela)
            - composição/agregação (dependência?)
(Os relacionamentos em programação orientada a objetos se referem à maneira como os objetos estão conectados uns aos outros. Existem três tipos principais de relacionamentos:
- Associação: é a relação mais simples entre objetos, onde um objeto usa outro objeto temporariamente para realizar uma operação. Essa relação é representada por uma linha pontilhada que conecta os objetos.
- Herança: é uma relação hierárquica entre uma classe base (ou superclasse) e uma classe derivada (ou subclasse). A subclasse herda os atributos e métodos da superclasse e pode adicionar novos atributos e métodos exclusivos. Essa relação é representada por uma linha sólida com uma seta apontando para a superclasse.
- Composição/agregação: é uma relação em que um objeto é composto por outros objetos (ou seja, é uma parte de outro objeto) ou um objeto é composto por vários objetos (ou seja, é uma coleção de objetos). A diferença entre composição e agregação é que, na composição, a vida do objeto composto depende da vida do objeto que o contém, enquanto na agregação, os objetos podem existir independentemente. Essa relação é representada por uma linha sólida com um losango no extremo que aponta para o objeto que contém outros objetos.)

    - Visibilidade de acesso
        - tipos:
            - public
            - protected
            - private
(Na programação orientada a objetos, a visibilidade de acesso se refere ao controle de acesso aos membros de uma classe (atributos, métodos, propriedades, eventos, etc.). Os tipos de visibilidade de acesso mais comuns são:
- public: o membro pode ser acessado por qualquer classe ou objeto, mesmo fora do escopo da classe em que foi definido.
- protected: o membro pode ser acessado apenas dentro da classe em que foi definido ou em classes derivadas (herança).
- private: o membro pode ser acessado apenas dentro da classe em que foi definido.)

    - Tipos de classes
        - Padrão
        - Abstratas
        - Interfaces
(- Classes Padrão: são classes comuns, utilizadas para criar objetos e definir suas propriedades e comportamentos.
- Classes Abstratas: são classes que não podem ser instanciadas diretamente, mas podem ser herdadas por outras classes. Elas podem conter métodos abstratos, que não têm implementação e precisam ser definidos nas classes derivadas.
- Interfaces: são como contratos que definem um conjunto de métodos e propriedades que uma classe deve implementar para atender às exigências da interface. As interfaces não têm implementação por si só, elas são implementadas por classes derivadas)






- Classes 
	- Nativas ou 'Artificiais' (construidas pelo programador)
	- Sempre dar preferência para o que ja esta escrito (procurar na documentação da MS)
	- As classes prestam serviços->       1) por meio de um objeto instanciado
                                            2) a própria classe atende o serviço


//declaração de um objeto frase para o tipo string        
String frase;

//instancia o objeto frase com um texto inicial
frase = new String("turma de c# Atos 2023");  --> a String é uma classe que oferece atributos e métodos (como .Lenght, . ToUpper, etc)

//ha um objeto com atributos e métodos da classe String
Console.WriteLine("A quantidade de caracteres da frase é: " + frase.Length());
Console.WriteLine("A frase em maiusculo: " + frase.ToUpper());

String outraFrase = Console.ReadLine();

(Na verdade, Console não é uma classe, é uma estrutura (ou struct) fornecida pela plataforma .NET. Ela fornece acesso a recursos de entrada e saída de console, como a entrada do teclado e a saída para a tela.
O método WriteLine() é um método estático da estrutura Console, o que significa que ele pode ser chamado sem precisar criar uma instância da estrutura Console. Isso ocorre porque o método WriteLine() não precisa acessar ou modificar nenhum membro específico de uma instância de Console. Ele apenas executa uma operação geral de escrita na saída do console.

Um método estático é um método que pertence à classe, em vez de pertencer a uma instância específica da classe. Isso significa que você pode chamar um método estático diretamente na classe, em vez de criar um objeto dessa classe primeiro.

Para declarar um método estático em C#, você deve usar o modificador "static" no início da declaração do método, como no exemplo a seguir:

public class Exemplo {
    public static int MetodoEstatico(int a, int b) {
        return a + b;
    }
}

Você pode chamar o método estático diretamente na classe, sem criar um objeto da classe:

int resultado = Exemplo.MetodoEstatico(2, 3);

Note que, em um método estático, você não pode acessar membros não estáticos da classe, porque eles só existem em objetos específicos da classe.)




Desafio/Exercício: pensando OO

1) Um veículo entra num estacionamento e pode alugar o espaço por horas, dias ou meses. O valor da hora é 5 reais, do dia 50 reais e do mês 350 reais. O administrador do estacionamento pode querer visualizar os veículos presentes na
garagem ou estacionamento, também pode querer saber os veículos que já passaram pelo estacionamento.
Contudo, a garagem tem um espaço finito de vagas.

Em geral, quando um veículo entra no estacionamento, são capturados os seguintes dados/informações:
    - placa
    - data de entrada
    - hora de entrada
    - cor veículo
    - marca
    - modelo

    - data de saida
    - hora de saida
    - valorPago

Ao final, quando o veículo sai do estacionamento, o manobrista realiza a cobrança, baseado na data e hora de saída em relação a data e hora de entrada.


Serviços:
    registrar a entrada do veiculo
    registrar a saida do veiculo
    calcular o valor da hospedagem



palavra reservada .this -> faz referência a um atributo da classe
.ToUpper() -> todos os caracteres para maiusculo
.Trim() -> para remover os espaços das extremidades

=> simbolo lambda -> aponta para uma variável

prop tab cria a propriedade com get set

sobrecarga - polimorfismo (varias formas de fazer uma coisa - mais de um construtor para a mesma coisa)